<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UrusTools">
    <!-- Copyright © NBS-Tech Team 2019.All rights reserved. -->
    <FontFamily x:Key="UrusFontAwesome" >pack://application;,,,/Resources/#FontAwesome</FontFamily>
    <!-- Brush -->
    <SolidColorBrush x:Key="TextForegroundColor" Color="#555555"/>
    <SolidColorBrush x:Key="NormalBorderBrushColor" Color="#F5F5F5"/>
    <SolidColorBrush x:Key="ButtonBackground" Color="#F8F8F8"/>
    <SolidColorBrush x:Key="HoverBorderBrushColor" Color="#F7E99E"/>
    <SolidColorBrush x:Key="HoverForegroundColor" Color="#68605D"/>
    <SolidColorBrush x:Key="PressedBackgroundColor" Color="#F9F9F9"/>

    <!-- /Brush -->
    <Style x:Key="FIcon" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource UrusFontAwesome}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundColor}"/>
        <Setter Property="Margin" Value="2,0,2,0" />
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <!-- FButton Template -->
    <ControlTemplate x:Key="FButton_Template" TargetType="{x:Type local:FButton}">
        <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Background}"
                Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Height}"
                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=CornerRadius}"
                Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Width}"
                >
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <TextBlock x:Name="icon" Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconMargin}"
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIcon}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconSize}"
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Foreground}">
                    <TextBlock.RenderTransform>
                        <RotateTransform x:Name="transIcon" Angle="0"/>
                    </TextBlock.RenderTransform>
                </TextBlock>

                <TextBlock VerticalAlignment="Center" x:Name="txt"
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ContentDecorations}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FontSize}"
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Foreground}">
                    
                </TextBlock>
            </StackPanel>
        </Border>
        <!-- 触发器 -->
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverBackground}"
                        TargetName="border"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverForeground}"
                        TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverForeground}"
                        TargetName="txt"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressedBackground}"
                        TargetName="border"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressedForeground}"
                        TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressedForeground}"
                        TargetName="txt"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" TargetName="border"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- FHButton Style -->
    <Style TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundColor}" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource PressedBackgroundColor}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource HoverBorderBrushColor}" />
        <Setter Property="PressedBackground" Value="{DynamicResource PressedBackgroundColor}" />
        <Setter Property="PressedForeground" Value="{DynamicResource HoverForegroundColor}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="FIconSize" Value="22" />
        <Setter Property="Template" Value="{DynamicResource FButton_Template}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,5,0" />
        <Setter Property="AllowsAnimation" Value="False" />
    </Style>
    <!-- /FHButton Style -->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type TextBlock},ResourceId=FBIcon}">
        
    </Style>
    <!-- FVButton Style -->

    <!-- /FVButton Style -->

</ResourceDictionary>